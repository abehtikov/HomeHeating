import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.Date
import org.joda.time.*
import java.lang.Math
import org.joda.time.Minutes

var double alpha = 0.25 // low pass filter tuning param
// RC = sampling_period * (1 - alpha) / alpha
// RC - time constant
// when alpha = 0.5, time constant is equal to the sampling_period
// alpha=0.15 --> 6 * sampling_period
// alpha=0.1  --> 9 * sampling_period

var double filteredValue = -99 // workaround for null

val int collectorAzimuthAngle = 234
var int dischargeRequestTresholdTemp = 70
var double dhwMaxToday = 0

var boolean pump_on = false
var Timer dhwDischargeTimer = null
var Timer solarManualOperationTimer = null
var Timer iceProtectTimer = null

// discharged kWh counter
var double dischargeKWH = 0
var double dischargeKwhMin

//var double deltaTder = 0 // devrivative of filtered deltaT 
var double collectorTder = 0 // rate of change of collector outlet T (deg/minute)
var double tfCollector = -99 // low pass filtered collector Temperature

//var double wattMinute = 0 // Watt*min runtime value
var double wattHour = 0

/******** Common diff. controller rules   */

rule "Temperature Sensor update"
when 
	//Item CollectorTemp received update or
	Item ReturnTemp received update
then
	if ((CollectorTemp.state instanceof DecimalType) && 
		(ReturnTemp.state instanceof DecimalType)) {
			
		var tColl = (CollectorTemp.state as DecimalType).doubleValue
		var tReturn = (ReturnTemp.state as DecimalType).doubleValue
	
		var tDelta = tColl - tReturn
		
		// ignore return T when solar pump is OFF
		if (SolarPumpSw.state == OFF) { 
			val lastDhwTemp = (LatestDhwReturnTemp.state as DecimalType).doubleValue
			tDelta = tColl - lastDhwTemp
			
		} else if (SolarPumpSw.state == ON /*&& rtControllerStatus.state != "FRP"*/) {
			// CHARGE or DISCHARGE mode only
			postUpdate(LatestDhwReturnTemp, tReturn)
			
			// record maximum dhw T today
			if (tReturn > dhwMaxToday) {
				dhwMaxToday = tReturn
			}
		}
		
		logDebug("solar", "Temperature drop is: {} K", tDelta)
		
		if (filteredValue == -99) {
			filteredValue = tDelta.doubleValue
		} else {
			filteredValue = filteredValue + alpha * (tDelta - filteredValue)
			val int vv = (filteredValue * 1000).intValue
			filteredValue = vv / 1000.0;
		}
		
		logDebug("solar.rules", "DeltaT after Low Pass filter (a={}) is: {} K", alpha, filteredValue)
		
		postUpdate(rtDeltaT, tDelta)
		postUpdate(rtFiltDeltaT, filteredValue)		
		
	} else {
		logInfo("solar", "Either collector or return temperature is undefined.")
	}
end

rule "Collector T Sensor update"
when 
	Item CollectorTemp received update
then
	var tColl = (CollectorTemp.state as DecimalType).doubleValue
	
	// T Collector rate of change
	if (tfCollector == -99) {
		tfCollector = tColl
		collectorTder = 0
	} else {
		collectorTder = (alpha * (tColl - tfCollector)).doubleValue // deg per minute
		tfCollector = tfCollector + collectorTder
		logDebug("solar", "T collector rate of change: {} deg/minute", collectorTder)
	}
	val int vv = (collectorTder * 1000).intValue
	postUpdate(rtCollTder, vv / 1000.0)
end


rule "Low pass Delta T update"
when 
	Item rtFiltDeltaT received update
then
	var deltaT = (rtFiltDeltaT.state as DecimalType).doubleValue
	var tColl = (CollectorTemp.state as DecimalType).doubleValue
	var deltaMax = (tnDeltaTon.state as DecimalType).doubleValue
	val appState = rtControllerStatus.state
	
	var powerFactor = (rtPowerDensity.state as DecimalType).doubleValue
	var power = deltaT * powerFactor
	
	if (pump_on) {	
		wattHour = (power / 60.0).doubleValue
	} else {
		wattHour = 0
	}
	var delta_kwh = wattHour / 1000.0
	
	// logInfo("solar", "Execute DeltaT update. Current pump state is: " + SolarPumpSw.state)
	if (ManualOperation.state == ON) {
		
	} else if (appState == "FRP") {
		logDebug("solar", "ICE protection of collector is enabled.")
	
	//} else if (CollectorInShadow.state == ON && DischargeDHWRequest == ON) {	
	} else if (appState == "DIS") {

		dischargeKWH = (dischargeKWH - delta_kwh).doubleValue
		logDebug("solar", "Discharging DHW Boiler... {} kWh", dischargeKWH)
		dischargeKwhMin = (tnDischargeKwhMin.state as DecimalType).doubleValue
		
		var minPower = 100
		if (tnDischargePowerMin.state instanceof DecimalType) {
			minPower = (tnDischargePowerMin.state as DecimalType).intValue
		}
		minPower = minPower * (-1) // negative delta during discharge
		
		var String reason = null
		if (dischargeKWH > dischargeKwhMin) {
			reason = "discharge amount is achieved"
			sendCommand(DischargeDHWRequest, OFF)
		} else if (power > minPower) {
			// delta is to low for discharge
			reason = "delta T is too low"
		}
		
		if (reason != null) {
			if (dhwDischargeTimer != null) { //disable timer in case we discharge before the timer expires
				dhwDischargeTimer.cancel()
			}
			logInfo("solar", "Stop DHW discharge. Reason: {}", reason)		
			sendCommand(rtControllerStatus, "IDLE")
		}
	} else if (appState == "OVP") {
		
	} else { // appState == IDLE || appState == CH
		
		if (SolarPumpSw.state == ON) {
			
			var tMinDrop = (tnDeltaToff.state as DecimalType).doubleValue
			if (deltaT < tMinDrop) {
				logInfo("solar", "delta T:{} C, delta T OFF: {} C --> switching solar pump OFF.", deltaT, tMinDrop)
				sendCommand(SolarPumpSw, OFF)
				sendCommand(rtControllerStatus, "IDLE")
				postUpdate(rtCollectorPower, 0)
				
			} else {
				// update estimated collector power
				postUpdate(rtCollectorPower, power.intValue)
			}
			
			//assume that exactly 1 minute has passed since the previous calculation
			//var inc_kwh = (power / 1000.0) / 60.0
			var prev = (kwhToday.state as DecimalType).doubleValue
			postUpdate(kwhToday, prev + delta_kwh) 
			
		// Pump is OFF	
		} else if ((HeatingSupportSw.state == OFF) && (DHW_Request.state == ON)) { // check the mode
			
			var latestDhwReturnTemp = (LatestDhwReturnTemp.state as DecimalType).doubleValue
			var tnRise = (tnRiseTCollector.state as DecimalType).doubleValue
			
			// Enable solar DHW
			var tDiff = tColl - latestDhwReturnTemp

			if (tDiff > deltaMax) {
				
				logInfo("solar", "T collector: {} C, DHW: {} C, deltaT ON: {} C.", 
					tColl, latestDhwReturnTemp, deltaMax.intValue
				)
				logInfo("solar", "T-diff: {} K --> Switching solar pump ON.", tDiff)
				sendCommand(SolarPumpSw, ON)
				sendCommand(rtControllerStatus, "CH")
				
			} else if (CollectorInShadow.state == OFF && tDiff > 0 && collectorTder > tnRise) {
				logInfo("solar", "T collector rise is {} deg/min --> Switching solar pump ON.", collectorTder)
				sendCommand(SolarPumpSw, ON)
				sendCommand(rtControllerStatus, "CH")
			}
			
		// Heating support
		} else if (HeatingSupportSw.state == ON) {
			var tMinUnderfloor = (tnTminHeatingSupport.state as DecimalType).doubleValue
			
			if (tColl > tMinUnderfloor + deltaMax) {
				logInfo("solar", "Switching solar pump to support underfloor heating. T coll: {} C", tColl)
				sendCommand(SolarPumpSw, ON)
				sendCommand(rtControllerStatus, "CH")
			}
		}
	}
	logDebug("solar", "Heating support: {}, DHW request: {}", HeatingSupportSw.state, DHW_Request.state)
end	

rule "Solar Pump switches ON"
when 
	Item SolarPumpSw changed to ON
then
	// log pump start time
	pump_on = true
	postUpdate(PumpStatusON, 5)
end

rule "Solar Pump switches OFF"
when 
	Item SolarPumpSw changed from ON to OFF
then
	// log pump shutdown
	pump_on = false
	postUpdate(PumpStatusON, 0) // 0 == Pump OFF
end

rule "Pump operation hours"
when
	Time cron "45 */3 * * * ?"
then
	// account only 'solar' pump hours
	if (pump_on == true && rtControllerStatus.state == "CH") {
		var state = TotalPumpOperatingHr.state
		if (state == Undefined || state == Uninitialized) {
			postUpdate(TotalPumpOperatingHr, 0)
		} else {
			val inc = 0.05 // 3 minutes = 0.05 hour
			var lastValue = (TotalPumpOperatingHr.state as DecimalType).doubleValue
			postUpdate(TotalPumpOperatingHr, lastValue + inc)
			
			lastValue = (PumpOperationTodayHr.state as DecimalType).doubleValue
			postUpdate(PumpOperationTodayHr, lastValue + inc)
		}
	}
end


rule "Reset daily meters"
when 
	Time is midnight
then
	var lastDay_kwh = (kwhToday.state as DecimalType).doubleValue
	postUpdate(kwhToday, 0)
	
	var month_kwh = (kwhThisMonth.state as DecimalType).doubleValue
	postUpdate(kwhThisMonth, month_kwh + lastDay_kwh)
	
	postUpdate(PumpOperationTodayHr, 0)
	
	dhwMaxToday = 0
end


/*
 * GUI solar controller params
 */
rule "Update power density" // Удельная мощность теплоносителя Ватт/градус К
when
	Item pHeatingCapacity received update or
	Item pFlowRate received update
then
	var double value = 60.0 //by default 60 W/deg C
	
	if (pHeatingCapacity.state instanceof DecimalType &&
		pFlowRate.state instanceof DecimalType) {
		
		val capacity = (pHeatingCapacity.state as DecimalType).doubleValue
		val flowRate = (pFlowRate.state as DecimalType).doubleValue
		
		if (capacity > 3500.0 && capacity < 4200.0) {
			value = (capacity * flowRate / 3600.0).doubleValue
			logInfo("solar", "Power density: {} W/deg C @ flow rate: {} l/h", value, flowRate)
		} else {
			logWarn("solar", "Invalid heating capacity value: {}", capacity)
		}
	
		postUpdate(rtPowerDensity, value)
	}
end

rule "Collector shadow ON/OFF"
when 
	Item CollectorInShadow changed
then
	var azimuth = (SunAzimuth.state as DecimalType).intValue
	var elevation = (SunElevation.state as DecimalType).doubleValue
	
	if (previousState == ON) {
		logInfo("solar", "Collector goes out of shadow."
			+ " Sun azimuth: {}, altitude: {}", azimuth, elevation)
	
	} else if (previousState == OFF) { // Collector now is in shadow.

		postUpdate(SunbeamAngleToFacade, -1.0)
		
		// check for discharge request
		if (DischargeDHWRequest.state == ON) {
			if (HolidayModeSw.state == ON || SunnyTomorrow.state == ON) {
				logInfo("solar", "Starting up the pump to discharge DHW storage.")
				sendCommand(rtControllerStatus, "DIS")
			}	
		}
	}
end

/*  End of Common diff. controller rules */



rule "Update Low Pass Filter"
when
	Item tnLowPassAlpha received update
then
	val double value = (tnLowPassAlpha.state as DecimalType).doubleValue
	
	if (value >= 0.05 && value <= 0.3) {
		logInfo("solar", "Low pass filter alpha updated from {} to {}", alpha, value)
		alpha = value
	}
end

rule "Update DHW Discharge threshold T"
when
	Item tnDhwDischargeTReturn received update
then
	val int value = (tnDhwDischargeTReturn.state as DecimalType).intValue
	
	if (value >= 60 && value <= 75) {
		logInfo("solar", "DHW Discharge threshold T updated from {} to {}", dischargeRequestTresholdTemp, value)
		dischargeRequestTresholdTemp = value
	}
end


rule "SolarPump control manual"
when 
	Item ManualOperation changed from OFF to ON
then
	if (solarManualOperationTimer != null) {
		solarManualOperationTimer.cancel()
		solarManualOperationTimer = null
	}
	// 15 min * 1100 W = 275 Wh = 237 kCall (2.37 kg water * 100 deltaT)
	// we can easily boil water inside the collector if we stop the pump for 15 min. 
	solarManualOperationTimer = createTimer(now.plusMinutes(15), [|
		sendCommand(ManualOperation, OFF)
	])
end	

rule "SolarPump back to AUTO"
when
	Item ManualOperation changed from ON to OFF
then
	val appState = rtControllerStatus.state
	
	// synchronize controller status with pump state
	if (pump_on && (appState == "IDLE" || appState == "OVP")) {
		sendCommand(rtControllerStatus, "CH")
	}
	
	if (!pump_on && (appState == "CH" || appState == "DIS" || appState == "FRP")) {
		sendCommand(rtControllerStatus, "IDLE")	
	}
end

rule "Check collector T"
when
	Time cron "35 */10 * * * ?" // check every 10 minutes
then
	val tColl = (CollectorTemp.state as DecimalType).doubleValue
	val tReturn = (ReturnTemp.state as DecimalType).doubleValue
	val appState = rtControllerStatus.state
	
	if (tnIceProtectionEnabled.state == ON && appState == "IDLE") {//&& SolarPumpSw.state == OFF) {
		// check if FROST PROTECTION is required
		var tempSP = (tnIceProtectionTMin.state as DecimalType).doubleValue
		if (pSolarFluidType.state == 0 && tempSP < 1) {
			tempSP = 2.5
		} else if (pSolarFluidType.state == 1) { // propylene glycol
			tempSP = -25
		}
		
		if (tColl < tempSP) {
			sendCommand(rtControllerStatus, "FRP")
			logInfo("solar", "Collector temperature: {} C. ICE protection activated.", tColl)
			sendCommand(SolarPumpSw, ON)
			
			val systemVolume = (pSystemVolume.state as DecimalType).doubleValue
			val flowRate = (pFlowRate.state as DecimalType).doubleValue
			
			var min = (30.0 * systemVolume / flowRate).intValue
			if (min < 4) { min = 4 }
			iceProtectTimer = createTimer(now.plusMinutes(min), [|
				sendCommand(SolarPumpSw, OFF)
				sendCommand(rtControllerStatus, "IDLE")
			])
		}
	}
	
	val tMax = (tnOverheatingTmax.state as DecimalType).doubleValue
	val tMin = (tnOverheatingTmin.state as DecimalType).doubleValue
	
	if (appState == "CH") {

		if (tReturn > tMax) {
			// DHW storage overheating protection
			sendCommand(rtControllerStatus, "OVP")
			sendCommand(SolarPumpSw, OFF)
		
			// notify user about possible collector stagnation
			logWarn("solar", "TReturn rised to {} C. DHW protection enabled. " +
				"Collector stagnation may occur.", tReturn)
		}
		
		// DHW charge percent indicator
		val amount = (kwhToday.state as DecimalType).doubleValue
		val demand = (DhwDailyDemand.state as DecimalType).doubleValue
		
		if (amount > 0 && demand > 0) {
			var int percent = (100 * amount / demand).intValue
			postUpdate(DhwChargeToday, percent)
		} else {
			postUpdate(DhwChargeToday, 0)
		}
		
		//check for possible discharge 
		if (amount > 2 && dhwMaxToday > dischargeRequestTresholdTemp) {
			sendCommand(DischargeDHWRequest, ON)
			dischargeKWH = 0
		}
		
		// Dynamic powerDensity for glycol
		if (pSolarFluidType.state == 1) {
			// TODO call script
		}
	}
	
	if (appState == "OVP" && tColl < tMin) {
		sendCommand(rtControllerStatus, "IDLE")
		logInfo("solar", "TCollector: {} C. Overheating protection is OFF.", tColl)
	}
end


rule "Controller state changed"
when
	Item rtControllerStatus changed
then
	var appState = rtControllerStatus.state
	logInfo("solar", "Controller status CHANGED from {} to {}", 
		previousState, appState
	)
	
	if (previousState == "DIS" && appState == "IDLE") {
		logInfo("solar", "Discharge DHW finished event handled here.")
	}
	
	if (appState == "IDLE") {
	
		// record latest DHW temperature when the following events occured:
		// DIS --> IDLE or CH --> IDLE
		if (previousState == "CH" || previousState == "DIS") {
				
			if (HeatingSupportSw.state == OFF) {
				var tReturn = (ReturnTemp.state as DecimalType).doubleValue
				postUpdate(LatestDhwReturnTemp, tReturn)
				postUpdate(PumpLatestOperation, new DateTimeType())
				
				logInfo("solar", "DHW temperature: {} C.", tReturn)
			}
		}
	}
end


/*
 * This rule is required in case of very hot night when discharge 
 * power falls below 50 Watt. Just to avoid DHW overheating on holiday
 * 
 */
rule "Repeating DHW discharge"
when 
	Time cron "56 0 23,0-8 * * ?" // every hour from midnight to 8 am
then
	// check for discharge request
	if (DischargeDHWRequest.state == ON) {
		if (HolidayModeSw.state == ON || SunnyTomorrow.state == ON) {
			sendCommand(rtControllerStatus, "DIS")
		}	
	}
end

rule "Invoke DHW discharge"
when 
	Item rtControllerStatus received command DIS
then
	val int hr = 12 // starting from the sunset
	// discharge power is only about 100-200 Watt at summer night. 
	// up to 2.4 kWh discharge volume per nigh is possible
	
	if (dhwDischargeTimer != null && dhwDischargeTimer.running) {
		logInfo("solar", "DHW discharge is already running.")
	} else {
		
		sendCommand(SolarPumpSw, ON)
		logInfo("solar", "DHW discharge started. Discharge demand: {} kWh. Already discharged: {} kWh", 
			tnDischargeKwhMin.state, dischargeKWH
		)
		dhwDischargeTimer = createTimer(now.plusHours(hr), [| 
			sendCommand(DischargeDHWRequest, OFF)
			sendCommand(rtControllerStatus, "IDLE")
		])
	}
end


rule "Discharge DHW is finished"
when
	Item rtControllerStatus changed from DIS to IDLE
then
	
	val int vv = (dischargeKWH * 100).intValue
	logInfo("solar", "DHW discharged: {} kWh. Stop the pump.", vv / 100.0)
	
	sendCommand(SolarPumpSw, OFF)
	//dischargeKWH = 0
	dhwDischargeTimer = null
end


rule "Sun position update"
when
	Item SunAzimuth received update
then
	var azimuth = (SunAzimuth.state as DecimalType).intValue
	var elevation = (SunElevation.state as DecimalType).doubleValue
	
	val minAngle = collectorAzimuthAngle - 90
	val maxAngle = collectorAzimuthAngle + 90
	
	if (elevation < 0) {
		postUpdate(CollectorInShadow, ON)
	}
	// horizontal shadow criteria
	else if (azimuth > minAngle && azimuth < maxAngle) {
		postUpdate(CollectorInShadow, OFF)
		var int angleDiff = Math::abs(azimuth - collectorAzimuthAngle)
		postUpdate(SunbeamAngleToFacade, 90 - angleDiff)
	} else {
		postUpdate(CollectorInShadow, ON)
	}
end


rule "Update ThingSpeak Solar temperatures"
when
	Time cron "45 * * * * ?"
then
	val field1 = (CollectorTemp.state as DecimalType).doubleValue
	val field2 = (ReturnTemp.state as DecimalType).doubleValue
	var field3 = 0
	if (SolarPumpSw.state == ON) { field3 = 1 }
	val field4 = (rtFiltDeltaT.state as DecimalType).doubleValue
	// flowRate
	val f5 = (pFlowRate.state as DecimalType).doubleValue
	val f6 = (LatestDhwReturnTemp.state as DecimalType).doubleValue

	var url = String::format("https://api.thingspeak.com/update?"
		+ "api_key=%8$s"
		+ "&field1=%1$.2f"
		+ "&field2=%2$.2f"
		+ "&field3=%3$d"
		+ "&field4=%4$.2f"
		+ "&field5=%5$.1f"
		+ "&field6=%6$.1f"
		+ "&field7=%7$.4f",
		field1, field2, field3, field4, f5, f6, wattHour, pThingSpeakApiKeySolar.state
	)
	logDebug("solar", "Update thingspeak channel 61471: " + url)
	sendHttpGetRequest(url)
end	

/*
 * Update thingspeak channel
 */
rule "Update ThingSpeak Brodok_heating channel"
when
	Item Pi_Temperature received update
then
	val value = (Pi_Temperature.state as DecimalType).doubleValue
	var url = String::format("https://api.thingspeak.com/update?api_key=%2$s&field1=%1$.2f",
		value, pThingSpeakApiKeyHeating.state
	)
	logDebug("brodok.rules", "Update thingspeak url: " + url)
	sendHttpGetRequest(url)
end


rule "Water or glycol"
when
	Item pSolarFluidType changed
then
	val type = pSolarFluidType.state
	
	if (type == 1) {
		postUpdate(pHeatingCapacity, 3690) // 45% propylene-glycol @ 40C
		postUpdate(SolarFluid, "Glycol")
	} else {
		postUpdate(pHeatingCapacity, 4187)
		postUpdate(SolarFluid, "Water")
		postUpdate(tnIceProtectionEnabled, ON)
	}
end

/*
 * 
 * Само-остывание бойлера 1 кВт-ч/сутки + 6 кВт-ч/сутки потребление ГВ
 * 
 * Бойлер 120 лтр
 */
rule "DHW Storage self discharge" // 
when
	Time cron "0 */20 * * * ?" // every 20 min
then
	val oldValue = (LatestDhwReturnTemp.state as DecimalType).doubleValue
	var int k = 40 // 0.04 в обычное время
	val double minTemp = 18.0
	
	// Коллектор в тени и насос выключен
	if (/*CollectorInShadow.state == ON &&*/ SolarPumpSw.state == OFF) {
		
		val delta = oldValue - minTemp
		if (HolidayModeSw.state == ON) { 
			k = 7 // 0.007 - нет водоразбора (в отпуске) = 0.021 * delta / per hour
		} 
		
		if (oldValue > 20.0) {
			
			val int vv = (k * delta).intValue
			val double drop = vv / 1000.0
			// T бойлера не может упасть ниже 10 градусов (зимой - ниже 5)
			logDebug("solar", "DHW storage T {} down by {} C. Holiday mode: {}",
				oldValue, drop, HolidayModeSw.state
			)
			postUpdate(LatestDhwReturnTemp, oldValue - drop)		
		}
	}
end


rule "OpenWeatherMap conditions tomorrow"
when 
	Item Condition_ID received update
then
	// rule is valid for OWM provider only! 
	val owm_id = (Condition_ID.state as DecimalType)
	if (owm_id == 800 ||
		owm_id == 801 ||
		owm_id == 802 ||
		owm_id == 904
	) {
		postUpdate(SunnyTomorrow, ON)
	} else {
		postUpdate(SunnyTomorrow, OFF)
	}
end


rule "Check OWM forecast"
when 
	Time cron "55 52 19 * * ?" // sunset is 8pm in september
	//or Item pSolarFluidType changed
	or Item AfterStartup changed to ON
then
	val fmt = "http://api.openweathermap.org/data/2.5/forecast/city?id=%1$s&APPID=%2$s&mode=xml&cnt=8"
	var url = String::format(fmt, pOwmCityId.state, pOwmApiKey.state)
	logInfo("solar", "Requesting OpenWeatherMap forecast for city {}", pOwmCityId.state)
	var String xml = sendHttpGetRequest(url)
	
	/*
	 * <time from="2016-06-09T15:00:00" to="2016-06-09T18:00:00">
		<symbol number="802" name="scattered clouds" var="03d"/>
		<precipitation/>
		<windDirection deg="307.002" code="NW" name="Northwest"/>
		<windSpeed mps="3.42" name="Gentle Breeze"/>
		<temperature unit="celsius" value="13.48" min="13.08" max="13.48"/>
		<pressure unit="hPa" value="996.03"/>
		<humidity value="60" unit="%"/>
		<clouds value="scattered clouds" all="44" unit="%"/>
	   </time>
	 */
	var offset = 7 
	var String rootNode = "/weatherdata/forecast/time[" + offset + "]"
	logDebug("solar", "OWM forecast:\n{}", xml)
	// assuming the query is executed at 6 am: 1 --> 6am - 9am, 2 --> 9am - 12:00 forecast
	// 3 --> 12:00 - 15:00
	// 4 --> 15:00 - 18:00
	var expr1 = "number(" + rootNode + "/symbol/@number)"
	var condition_id = transform("XPATH", expr1, xml)
	
	var condition = transform("XPATH", "string(" + rootNode + "/symbol/@name)", xml)
	var clouds = transform("XPATH", "number(" + rootNode + "/clouds/@all)", xml)
	
	logInfo("solar", "Tomorrow 12:00 - 3pm : {}, clouds {}%", condition, clouds)
	//var t1 = transform("XPATH", "string(/weatherdata/forecast/time[3]/@from)", xml)
	//var t2 = transform("XPATH", "string(/weatherdata/forecast/time[3]/@to)", xml)
	
	//t1 = transform("REGEX", "/^T\\(d{2}:d{2})", t1)
	
	postUpdate(Condition_ID, condition_id)
	postUpdate(Clouds, clouds)
	postUpdate(Condition, condition)
end
