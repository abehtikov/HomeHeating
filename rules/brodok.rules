import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.Date
import org.joda.time.*
import java.lang.Math
import org.joda.time.Minutes

var Number processUpdate = 0
var Timer timer = null
var Timer heatingBackToAuto = null // back to calendar control when user command expires
var Timer warmFloorTimer = null // delayed start following  HI -> LO_ALL transition
var Timer kitchenTimer = null // kitchen underfloor heating loop timer
var Timer coolDownTimer = null // boiler cool down timer to reduce temperature before LO_ALL event
var Timer fullPowerTimer = null

val DateTimeType expired = new DateTimeType()

var int pwm_counter = 0
var boolean ON_deadband = false
var boolean OFF_deadband = false
var boolean event_deadband = false // signals deadband X min before calendar event expires


rule "Calculate current heating power demand"
when
	//Item HeatLoadFactor changed or
	//Item HeatCompensation changed or
	Item ma48hRrdTemp changed
then
	var lf = (HeatLoadFactor.state as DecimalType).doubleValue
	var ambTemp 
	if (ma48hRrdTemp.state instanceof DecimalType) {
		ambTemp = (ma48hRrdTemp.state as DecimalType).doubleValue
	} else {
		ambTemp = (MonthAverageTemp.state as DecimalType).doubleValue
	}
	
	var roomTempAvg = (TempSensor.state as DecimalType).doubleValue
	var hc = (HeatCompensation.state as DecimalType).doubleValue
	var demand = (roomTempAvg - ambTemp) * lf - hc

	// Maximum required heat demand is 3kW (@-20C ambient temperature)
	if (demand > 3000) {
		demand = 3000
	}
	logDebug("brodok.rules", "calculated power demand kW: " + demand/1000)
	if (processUpdate == 1) {
		postUpdate(HeatPowerDemand_DailyAvg, demand/1000)
		PowerDemandLastUpdate.postUpdate(new DateTimeType())
		//callScript("demo")
	}
end

rule "Startup"
when
	System started
then
	
	callScript("init_solar")
	
	callScript("init_api_keys")

	logDebug("brodok.rules", "Set default valve position (open) of the living room loop.")
	// open living room valve (Normally Open)
	postUpdate(LivingRoom_PWM_PV, ON)
	sendCommand(LivingRoom_PWM_enabled, OFF)
	postUpdate(Heating_Valve_LivingRoom, ON)
	postUpdate(LivingRoom_PWM_SP, 25)
	postUpdate(Kitchen_PWM_SP, 50)
	postUpdate(Heating_Valve_Kitchen, OFF) // normally closed
	postUpdate(Radiators_PWM_Cycle, 240) // 4h by default
	postUpdate(Valve_Toggle_Deadband, 7) // minutes
	
	postUpdate(BoilerEventPower, 0)
	postUpdate(HeatingEventPeriod_m, 0)
	
	AfterStartup.sendCommand(OFF)
	timer = createTimer(now.plusSeconds(30)) [|
		postUpdate(AfterStartup, ON)
	]

	CalendarRequestPriority.postUpdate(ON)
	
	logDebug("brodok.rules", "Init completed")
	processUpdate = 1
end	

/*
 * Let variables to get initial states from rrd
 */
rule "After System startup"
when
	Item AfterStartup changed from OFF to ON
then
	if (timer!=null) {
		timer.cancel
		timer = null
	}
	callScript("initialize")
	
	if (HeatingEventRawData.state != Uninitialized && HeatingEventRawData.state != Undefined) {
		logInfo("mqtt.event", "Parsing persisted mqtt event data.")
		callScript("ParseHeatingEvent")
	}
	// after system reboot boiler control mode is restored back to calendar
	postUpdate(UserHeatingRequest, "AUTO")
	var String message = "Boiler control mode set to Calendar after system reboot"
	logInfo("heating.control.mode", message)
	// sendMail(to, subject, message)
end

rule "New month begins"
when
	Time cron "0 0 0 1 * ?" or 
	System started
then
	callScript("monthAverage")
	postUpdate(kwhThisMonth, 0)
end


/*
 * Deprecated
 *
rule "Heating Power demand persist to Google"
when
	Item ma24hTemp received update
then
	val t24ma = (ma24hTemp.state as DecimalType).doubleValue
	val t48ma = (ma48hTemp.state as DecimalType).doubleValue
	
	var t24avg = (ma24hRrdTemp.state as DecimalType).doubleValue
	var t48avg = (ma48hRrdTemp.state as DecimalType).doubleValue
	logInfo("gss.ma.temperature", "Moving average since 24/48 h is {}/{}", t24ma, t48ma)
	logInfo("gss.rrd.average.temp", "RRD based average temperature since 24/48 h is {}/{}", t24avg, t48avg)
	
	var Number dailyAvgAmbientTemp = t48avg
	
	var roomTempAvg = 16.0
	if (TempSensor.state instanceof DecimalType) {
		roomTempAvg = (TempSensor.state as DecimalType).doubleValue	
	}
	logDebug("gss.room.temp", "" + roomTempAvg)
	
	var hc = (HeatCompensation.state as DecimalType).intValue
	var lf = (HeatLoadFactor.state as DecimalType).intValue
	
	var demand = (roomTempAvg - dailyAvgAmbientTemp) * lf - hc

	// Maximum required heat demand is 3kW (@-20C ambient temperature)
	if (demand > 3000) {
		demand = 3000
	}
	demand = demand / 1000 // in kW
	logDebug("gss.daily.power.demand", demand + " kW")
	postUpdate(HeatPowerDemand_DailyAvg, demand)
	
	// run script to calculate boiler duty cycles according to the model
	callScript("demo")
	
	logDebug("gss.url", "" + GoogleScriptURL.state)
	
	val all40c = (Duration_ALL_40C.state as DecimalType).doubleValue
	val r70c = (Duration_R_70C.state as DecimalType).doubleValue
	val r40c = (Duration_R_40C.state as DecimalType).doubleValue
	
	val String url = GoogleScriptURL.state
	
	var winCurlCmd = String::format("cmd.exe /c curl -k \"%1$s?" +
		"Timestamp=%2$tQ&PowerDemand=%3$.3f&all40=%4$.3f&r70=%5$.3f&r40=%6$.3f\"",
		url, new Date(), demand, all40c, r70c, r40c)

	var curlCommand = String::format("/usr/bin/curl -k \"%1$s?" +
		"Timestamp=%2$tQ&PowerDemand=%3$.3f&all40=%4$.3f&r70=%5$.3f&r40=%6$.3f\"",
		url, new Date(), demand, all40c, r70c, r40c
	)
	
	if (os_type == "win") {
		logDebug("gss.win.curl", winCurlCmd)
		//executeCommandLine("cmd.exe /c echo \"123\"")
		executeCommandLine(winCurlCmd)
	} else {
		logDebug("gss.curl.dump", curlCommand)
		executeCommandLine(curlCommand, 2000)	
	}
end
*/

rule "User heating request change"
when
	Item UserHeatingRequest changed
then
	val userRequest = UserHeatingRequest.state
	
	if (userRequest == "AUTO") {
		
		// lookup persisted value of the CalendarHeatingRequest
		var String calendarHeatingState = CalendarHeatingRequest.state.toString()
		var String boilerState = BoilerHeatingMode.state.toString()
		
		logDebug("heating.auto.requested", "Compare calendar state and boiler's state: {} vs. {}", calendarHeatingState, boilerState)
		if (calendarHeatingState == "Uninitialized") {
			calendarHeatingState = "Off"
		}
		// compare current state and calendar's state
		if (calendarHeatingState != boilerState) {
		// if required, switch boiler to the requested heating mode
			sendCommand(BoilerHeatingMode, calendarHeatingState)
		}
		// if user requested AUTO himself - cancel timer/trigger
		if (heatingBackToAuto != null) {
			heatingBackToAuto.cancel()
			heatingBackToAuto = null
		}
		// update GUI
		postUpdate(BoilerCtrlMode, "Calendar")
		postUpdate(UserRequestExpires, expired)
		
	} else {
		postUpdate(BoilerCtrlMode, "Manual");
		
		if ( UserHeatingRequest.state == "Off" ) {
			
			sendCommand(BoilerHeatingMode, "Off")
			if (heatingBackToAuto != null) {
				heatingBackToAuto.cancel()
				heatingBackToAuto = null
			}
			// TODO send email reminder to switch boiler to calendar mode.
			logInfo("boiler.request.off", "Switching boiler off completely!!!")
			if (CalendarRequestPriority.state == OFF) {
				val String message = "Boiler is turned Off completely and won't be triggered by calendar. "
				//	+ "To activate the boiler remotely send a message to MQTT broker."
				// sendMail(to, subject, message)
			}
		} else {
			sendCommand(BoilerHeatingMode, "" + userRequest)
			// set a timer to switch back to calendar after timeout	
			var timeout = (UserRequestMaxDuration.state as DecimalType).intValue
			var endTime = now.plusHours(timeout)
			postUpdate(UserRequestExpires, new DateTimeType(endTime.toCalendar(new java.util.Locale("en"))))
			logDebug("schedule.fututre.event", "Back to calendar control on " + endTime)
			
			if (heatingBackToAuto == null) {
				heatingBackToAuto = createTimer(endTime) [|
					postUpdate(UserHeatingRequest, "AUTO")
				]
			} else {
				// reschedule does not work
				heatingBackToAuto.reschedule(endTime)
			}
		}
	} 
end


rule "Calendar heating event"
when
	Item CalendarHeatingRequest received command
then
	var cmd = receivedCommand
	// validate calendar heating request command
	if (cmd == "Off" || cmd == "LO_R" || cmd == "HI" || cmd == "LO_ALL" 
		|| cmd == "HI_B" || cmd == "LO_50R" || cmd == "LO_50B"
	) {
		if (BoilerCtrlMode.state == "Calendar") {
			
			sendCommand(BoilerHeatingMode, receivedCommand)
		
		} else if (CalendarRequestPriority.state == ON && BoilerHeatingMode.state == "Off") {
			// boiler had been switched Off manually and then calendar event has occured
			logDebug("heating.calendar.takeover", "Received {} when calendar priority is ON and boiler is Off", cmd)
			// switch Manual to Calendar/AUTO
			sendCommand(UserHeatingRequest, "AUTO")
		} else {
			logInfo("calendar.request", "Boiler control mode: {}, heating mode: {}. Ignore command: {}", 
				BoilerCtrlMode.state, BoilerHeatingMode.state, cmd)
		}
	} else if (cmd != "CAL") {
		logInfo("calendar.event", "Unsupported calendar command event: {}", cmd)
	}
end

rule "Calendar control request" 
when
	Item CalendarHeatingRequest changed to CAL
then
	// switch back to calendar based heating schedule
	postUpdate(CalendarRequestPriority, ON)
	//restore the previous calendar request
	if (previousState == "CAL") {
		sendCommand(CalendarHeatingRequest, "Off")
	} else {
		sendCommand(CalendarHeatingRequest, previousState.toString)
	}
	// send email
	// sendMail(to, "Brodok heating is back to calendar control", 
	// "Home heating system control mode is set to automatic (by calendar).")
end

rule "BoilerHeatingMode changed"
when
	Item BoilerHeatingMode changed
then
	val newState = BoilerHeatingMode.state
	logInfo("boiler.heating.mode", "Switch from {} to {}", previousState, newState)
	
	if (coolDownTimer != null) {
		coolDownTimer.cancel()
		coolDownTimer = null
	}
	if (newState == "HI") {
		sendCommand(Heating_Boiler_HI, ON)
		sendCommand(Heating_Boiler_LO, OFF)
		postUpdate(WarmFloorValveHelper, OFF)
		
		sendCommand(LivingRoom_PWM_enabled, ON)
		
	} else if (newState == "HI_B") {
		sendCommand(Heating_Boiler_HI, ON)
		sendCommand(Heating_Boiler_LO, OFF)
		postUpdate(WarmFloorValveHelper, OFF)
		
		sendCommand(LivingRoom_PWM_enabled, OFF)
		sendCommand(Heating_Valve_LivingRoom, OFF)
		
	} else if (newState == "LO_R" || newState == "LO_50R") {
		sendCommand(Heating_Boiler_HI, OFF)
		sendCommand(Heating_Boiler_LO, ON)
		postUpdate(WarmFloorValveHelper, OFF)
		
		sendCommand(LivingRoom_PWM_enabled, ON)
		
		if (previousState == "LO_ALL") {
			postUpdate(BoilerFullPowerTimeout, 9)
		}
		
	} else if (newState == "LO_50B") {
		sendCommand(Heating_Boiler_HI, OFF)
		sendCommand(Heating_Boiler_LO, ON)
		postUpdate(WarmFloorValveHelper, OFF)
		
		sendCommand(LivingRoom_PWM_enabled, OFF)
		sendCommand(Heating_Valve_LivingRoom, OFF)
				
		if (previousState == "LO_ALL") {
			postUpdate(BoilerFullPowerTimeout, 9)
		}
		
	} else if (newState == "LO_ALL") {
		sendCommand(Heating_Boiler_HI, OFF)
		
		if (previousState == "LO_R" || previousState == "LO_50R" 
			|| previousState == "LO_50B"
		) {
			sendCommand(Heating_Boiler_LO, OFF)
			logInfo("boiler.cooldown", "Pause boiler heating without interrupting the pump to reduce temperature.")
			coolDownTimer = createTimer(now.plusSeconds(150), [| // +2.5 min to cool down
				sendCommand(Heating_Boiler_LO, ON)
				logInfo("boiler.cooldown", "2.5 min. cool down is over. Switch boiler LO = ON")
			])
		} else {
			sendCommand(Heating_Boiler_LO, ON)
		}

		sendCommand(LivingRoom_PWM_enabled, OFF)
		
		if (previousState == "HI" || previousState == "HI_B") {
			// open living room valve for additional heat transfer
			sendCommand(Heating_Valve_LivingRoom, ON)
			// delay opening warm floor valves until water cools down
			warmFloorTimer = null
			warmFloorTimer = createTimer(now.plusMinutes(10), [|
				WarmFloorValve.sendCommand(ON)
				logInfo("boiler.cooldown", "HI --> LO_ALL  transition cool down is over.")
				sendCommand(Heating_Valve_LivingRoom, OFF)
			])
			logDebug("boiler.heating.mode", "HI->LO_ALL 10 min. delay before opening warm floor valves")
		} else {
			WarmFloorValve.sendCommand(ON)
			sendCommand(Heating_Valve_LivingRoom, OFF)
		}
		
	} else if (newState == "Off") {
		sendCommand(Heating_Boiler_HI, OFF)
		sendCommand(Heating_Boiler_LO, OFF)
		postUpdate(WarmFloorValveHelper, OFF)
		
		// open living room valve (Normally Open)
		sendCommand(LivingRoom_PWM_enabled, OFF)
		sendCommand(Heating_Valve_LivingRoom, ON)
		
		// reset full power indicator
		if (fullPowerTimer != null) {
			fullPowerTimer.cancel()
			fullPowerTimer = null
		}
		sendCommand(BoilerFullPowerMode, 0)
	} else {
		logInfo("boiler.heating.mode", "Ignore command: " + newState)
	}
end


rule "Close warm floor valves correctly"
when
	Item WarmFloorValveHelper changed to OFF
then
	// check if timer exists to open valves in future
	if (warmFloorTimer != null) {
		warmFloorTimer.cancel()
		warmFloorTimer = null
	}
	// switch warm floor valves group OFF
	WarmFloorValve.sendCommand(OFF)
	postUpdate(WarmFloorValveHelper, ON)
end

/*
 * Kitchen valve is using proxy switch to establish 'startup delay' control strategy
 * 
 * Group			|	Item proxy (virtual switch)	|	Item (GPIO actuator)
 * --------------------------------------------------------------------------
 * WarmFloorValve	|	Kitchen_Valve_Proxy			|	Heating_Valve_Kitchen
 * 
 */
rule "Kitchen valve proxy"
when 
	Item Kitchen_Valve_Proxy received command
then
	if (receivedCommand == OFF) {
		// disable kitchen timer if any
		if (kitchenTimer != null) {
			kitchenTimer.cancel()
			kitchenTimer = null
		}
		sendCommand(Heating_Valve_Kitchen, OFF)
		
	} else if (receivedCommand == ON) {
		
		var pwm = (Kitchen_PWM_SP.state as DecimalType).intValue
		if (pwm == 100) {
			logInfo("kitchen.proxy", "Kitchen warm floor SP=100%. Opening valve immediately")
			sendCommand(Heating_Valve_Kitchen, ON)
			
		} else if (pwm > 0) {
			
			var int delay = 5 // default
			var state = HeatingEventPeriod_m.state
			if (state == Undefined || state == Uninitialized) {
				delay = 5 // min.
			} else {
				var int duration = (state as DecimalType).intValue
				delay = ((100 - pwm) * duration / 100.0).intValue
			}
			
			logInfo("kitchen.delayed", 
				"Trigger Kitchen's warm floor UP with delay = {} min. PWM SP: {}%", delay, pwm)
			if (kitchenTimer != null) {
				kitchenTimer.cancel()
				kitchenTimer = null
			}
			kitchenTimer = createTimer(now.plusMinutes(delay), [|
				sendCommand(Heating_Valve_Kitchen, ON)
			])
		}
	}
end



rule "Convert Atm. Pressure units"
when
	Item AtmPressure_mbar changed
then
	var mbar = (AtmPressure_mbar.state as DecimalType).doubleValue
	var mmHg = mbar * 0.75006375541921
	postUpdate(AtmPressure_mmHg, mmHg.intValue)
end

/*
 * PWM related rules
 * 
 */
rule "PWM tick"
when
	Time cron "0 * * * * ?" // every 1 minutes
	//Time cron "30 * * * * ?" // for quick test
then
	var pwm_sp = (LivingRoom_PWM_SP.state as DecimalType).intValue

	var cycle_len = (Radiators_PWM_Cycle.state as DecimalType).intValue

	var pv = 100 * pwm_counter / cycle_len
	val currentState = LivingRoom_PWM_PV.state
	
	if (LivingRoom_PWM_enabled.state == ON)
		logDebug("pwm", "PWM tick. Living room PV: {}, SP: {}, current state: {}", 
			pv, pwm_sp, currentState
		)
	
	if (pv >= pwm_sp) {
		if (currentState == ON)
			sendCommand(LivingRoom_PWM_PV, OFF)
	} else {
		if (currentState == OFF)
			sendCommand(LivingRoom_PWM_PV, ON)
	}

		
	// check dead band location for valve
	var deadband = (Valve_Toggle_Deadband.state as DecimalType).intValue
	
	if (pwm_counter > cycle_len - deadband) { // prevent short ON-OFF-ON switch
		ON_deadband = true
	} else {
		ON_deadband = false
	}
	
	val pwm_off_mm = pwm_sp * cycle_len / 100
	// check if we are approaching pwm PV ON -> OFF change
	if ((pwm_off_mm - deadband) < pwm_counter && pwm_counter <= pwm_off_mm) {
		OFF_deadband = true
	} else {
		OFF_deadband = false
	}
	
	logDebug("pwm", "PWM ON_deadband : {},  OFF_deadband : {}", ON_deadband, OFF_deadband)
			
	pwm_counter = pwm_counter + 1
	if (pwm_counter == cycle_len)
		pwm_counter = 0	
	
	val countDownState = HeatingEventCountDown.state
	if (countDownState != Undefined && countDownState != Uninitialized) {
		var int countDown = (countDownState as DecimalType).intValue
				
		if (0 < countDown && countDown <= deadband) {
			event_deadband = true
		} else {
			event_deadband = false
		}
		logDebug("pwm", "Event count down: {}. deadband: {}", countDown, event_deadband)
		
		if (countDown > 0) {
			countDown = countDown - 1
			postUpdate(HeatingEventCountDown, countDown)
		}
	}
end


rule "PWM Update living room valve"
when
	Item LivingRoom_PWM_PV changed
	//Item LivingRoom_PWM_enabled changed from OFF to ON
then
	if (LivingRoom_PWM_enabled.state == ON) {
		// update valve only when PWM control is allowed
		
		if (event_deadband) {
			// Prevent valve toggle. we are in the deadband.
			logInfo("pwm", "Keep Heating_Valve_LivingRoom in  {}  state due to EVENT DEADBAND", 
				Heating_Valve_LivingRoom.state
			)
		} else {
			val newState = LivingRoom_PWM_PV.state.toString
			logInfo("brodok.rules.pwm", "Living room valve change from {} to {}",
				Heating_Valve_LivingRoom.state, newState
			)
			sendCommand(Heating_Valve_LivingRoom, newState)
		}
	}
end

rule "PWM control enabled"
when
	Item LivingRoom_PWM_enabled changed from OFF to ON
then
	val pv = LivingRoom_PWM_PV.state.toString
	var valveState = Heating_Valve_LivingRoom.state
	
	// prevent short on -> off -> on transitions < 6 min
	if (ON_deadband && /*pwm_sp != 0 &&*/ valveState == ON) {
		logInfo("pwm.deadband", 
			"Keep Heating_Valve_LivingRoom [ OPEN ] despite PWM control PV is {}.", pv)
	} else if (OFF_deadband && /*pwm_sp != 100 &&*/ valveState == OFF) {
		logInfo("pwm.deadband", 
			"Keep Heating_Valve_LivingRoom [ CLOSED ] despite PWM control PV is {}.", pv)
	} else {
		logInfo("brodok.rules", "ENABLE Living room valve PWM control. PV = {}", pv)
		sendCommand(Heating_Valve_LivingRoom, pv)	
	}
end

/*
 * Calendar event entry point.
 */
rule "Event metadata changed"
when 
    Item HeatingEventRawData received update
then
	callScript("ParseHeatingEvent")
end


rule "Debug boiler trends"
when
	//Time cron  "0 * * * * ?" // every 1 minutes
	Time cron "30 * * * * ?"
then
	callScript("UpdateBoilerTrends")
end

//1
rule "Valve Living room trend"
when
	Item Heating_Valve_LivingRoom changed
then
	if (Heating_Valve_LivingRoom.state == ON)
		postUpdate(trValveLiv, 5)
	else
		postUpdate(trValveLiv, 0)
end

//2
rule "Valve Kitchen trend"
when
	Item Heating_Valve_Kitchen changed
then
	if (Heating_Valve_Kitchen.state == ON)
		postUpdate(trValveKit, 15)
	else
		postUpdate(trValveKit, 10)
end

//3
rule "Valve Kitchen proxy trend"
when
	Item Kitchen_Valve_Proxy changed
then
	if (Kitchen_Valve_Proxy.state == ON)
		postUpdate(trValveKProxy, 25)
	else
		postUpdate(trValveKProxy, 20)
end


/*
 * Experimental data: 3kW, flow 8l/h 
 * 40C >> 50C : 8m55s
 * 40C >> 64C : 50m
 * TODO: 20C >> 50C : estimate: 15m
 * 
 * Upd: Nov 22
 * 36sec of 3kW is required to heat 1deg up @ 6l/min (LO_B mode)
 */
rule "Boiler full power operation mode"
when
	Item BoilerFullPowerTimeout received update
then
	val fullPowerTimeout = (BoilerFullPowerTimeout.state as DecimalType).intValue
	if (fullPowerTimeout > 0) {
	
		BoilerFullPowerMode.sendCommand(ON)
		if (fullPowerTimer != null) {
			fullPowerTimer.cancel()
			fullPowerTimer = null
		}
		fullPowerTimer = createTimer(now.plusMinutes(fullPowerTimeout), [|
			BoilerFullPowerMode.sendCommand(OFF)
		])
		logDebug("heating", "Boiler running full power for {} minutes", fullPowerTimeout)
		
	} else { // zero timeout
		BoilerFullPowerMode.sendCommand(OFF)
	}
end


rule "Boiler full power timeout"
when
	Item Heating_Boiler_LO changed from OFF to ON
then
	var mode = BoilerHeatingMode.state
	var int fullPowerTimeout // min
	if (mode == "LO_ALL") {
		fullPowerTimeout = 30
		if (HeatingEventPeriod_m.state instanceof DecimalType) {
			fullPowerTimeout = 1 + (HeatingEventPeriod_m.state as DecimalType).intValue
		}	
	} else { // mode LO_R
		fullPowerTimeout = 17
	}
	
	BoilerFullPowerTimeout.postUpdate(fullPowerTimeout)
end

// solar pump remote control
rule "Solar pump manual control"
when
	Item PumpControl received command
then
	if (ManualOperation.state == ON) {
		if (receivedCommand == "on") {
			sendCommand(SolarPumpSw, ON)
		} else {
			sendCommand(SolarPumpSw, OFF)
		}
	} else {
		logWarn("solar", "MQTT solar pump control is allowed in ManualOperation mode!")
	}

end

// update openhab last will topic when MQTT is up
rule "MQTT is UP"
when
	Item nhMqtt changed to ON
then
	postUpdate(nhMqttLwtStatus, "CONNECTED")
end