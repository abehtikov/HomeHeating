import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.Date
//import static java.util.Collections.*

var Number processUpdate = 0
var Timer timer = null
//var int[] tempAvg = new int[] {-5, -4, -1} // Jan-Feb-March test
var String Boiler_PrevState

/**
 * This rule switches off warm floor valves when boiler is about to switch to HI temp. mode
 */
rule "Boiler HI mode"
 	when
 		Item Heating_Boiler_HI received command ON
 	then
 		WarmFloorValve.sendCommand(OFF)
end

rule "Boiler LO mode"
	when
 		Item Heating_Boiler_LO received command
 	then
 		if (receivedCommand == ON) {
 			// open warm floor manifold valves
 			if (Heating_Boiler_HI.state == OFF) {
 				
 				WarmFloorValve.sendCommand(ON)
	 		} else {
	 			logInfo("brodok.rules", "Cannot switch to LO mode, because boiler is running HI temperature mode.")
	 		}	
	 	} else {
	 		// close warm floor manifold valves
	 		WarmFloorValve.sendCommand(OFF)
	 	}
 end

/*
 * Rule 1
 */
rule "Boiler Master mode change"
when
	Item Heating_Boiler_Mode received command
then
	var requested_mode = receivedCommand
	logInfo("brodok.rules", "Received command: " + requested_mode + ". previousState: " + Boiler_PrevState)
	
	// avoid processing duplicate commands
	if (requested_mode != Boiler_PrevState) {
	
		if (requested_mode == "Off") {
			sendCommand(Heating_Boiler_HI, OFF)
			sendCommand(Heating_Boiler_LO, OFF)	
				
		} else if (requested_mode == "HI") {
			sendCommand(Heating_Boiler_HI, ON)
			sendCommand(Heating_Boiler_LO, OFF)		
			
		} else if (requested_mode == "LO") {
			// when switching from HI to LO, give the temperature 5min to cool down before opening the valves 
			if (Boiler_PrevState == "HI") {
				logDebug("boiler.mode", "5 min. delay before opening warm floor valves")
			}
			sendCommand(Heating_Boiler_HI, OFF)
			sendCommand(Heating_Boiler_LO, ON)
			
		} else {
			logInfo("brodok.rules", "Ignore command: " + requested_mode)
		}
		
	}
end

rule "Boiler status update"
when
	Item Heating_Boiler_Mode changed
then
	var s = Heating_Boiler_Mode.state
	var msg = "Boiler status update attempt from [" + previousState + "] to [" + s + "]"
	logInfo("brodok.rules", msg)
	
	if ( !((s == "Off") || (s == "LO") || (s == "HI")) ) {
		// correct value for GUI
		Heating_Boiler_Mode.state = previousState		
	}
	// preserve value to filter out duplicate command (ON-ON or HI-HI) in upper rule 1
	Boiler_PrevState = Heating_Boiler_Mode.state.toString()
end

rule "Calculate current heating power demand"
when
	Item HeatLoadFactor changed or
	Item HeatCompensation changed or
	Item Temperature changed
then
	var lf = (HeatLoadFactor.state as DecimalType).doubleValue
	var ambTemp 
	if (Temperature.state instanceof DecimalType) {
		ambTemp = (Temperature.state as DecimalType).doubleValue
	} else {
		ambTemp = 0
	}
	
	var roomTempAvg = (TempSensor.state as DecimalType).doubleValue
	var hc = (HeatCompensation.state as DecimalType).doubleValue
	var demand = (roomTempAvg - ambTemp) * lf - hc

	// Maximum required heat demand is 3kW (@-20C ambient temperature)
	if (demand > 3000) {
		demand = 3000
	}
	logDebug("brodok.rules", "calculated power demand kW: " + demand/1000)
	if (processUpdate == 1) {
		//postUpdate(HeatPowerDemand_Current, (demand/1000))	
		//postUpdate(PowerDemandLastUpdate, new DateTimeType())
		HeatPowerDemand_Current.postUpdate(demand/1000)
		PowerDemandLastUpdate.postUpdate(new DateTimeType())
	}
end

rule "Startup"
when
	System started
then
	//postUpdate(ActiveBoilerHeatingElements, 3)
	postUpdate(TempSensor_Corridor, 20.0)
	postUpdate(TempSensor_Kitchen, 21.0)
	postUpdate(TempSensor_Bedroom, 19.0)
	//sendCommand(HeatCompensation, 600)
	//sendCommand(HeatLoadFactor, 110)
	//sendCommand(LO_HI_Ratio, 0.6)
	//postUpdate(Heating_Valve_Towel_Warmer, ON)
	
	//var os = java.lang.System::getProperty("os.name")
	//logDebug("homeHeating.os", os)
	
	logDebug("brodok.rules", "Init completed")
	processUpdate = 1
end	

rule "Convert Atm. Pressure units"
when
	Item AtmPressure_mbar changed
then
	var mbar = (AtmPressure_mbar.state as DecimalType).doubleValue
	var mmHg = mbar * 0.75006375541921
	postUpdate(AtmPressure_mmHg, mmHg.intValue)
end

rule "Heating Power demand persist to Google"
when
	//Time is noon // recalculate power demand once a day
	//Time cron "0 */6 * * * ?" // every 5 min.
	Item LO_HI_Ratio changed
then
	// TODO calculate daily average ambient temp for the last 24h.
	
	var Number dailyAvgAmbientTemp = 6.7
	var average = Temperature.averageSince(now.minusMinutes(30), "rrd4j")
	if (average instanceof DecimalType) {
		dailyAvgAmbientTemp = (average as DecimalType).doubleValue
	}
	logDebug("gss.daily.avg.temp", "" + dailyAvgAmbientTemp)
	
	var roomTempAvg = 16.0
	if (TempSensor.state instanceof DecimalType) {
		roomTempAvg = (TempSensor.state as DecimalType).doubleValue	
	}
	logDebug("gss.room.temp", "" + roomTempAvg)
	
	var hc = (HeatCompensation.state as DecimalType).intValue
	var lf = (HeatLoadFactor.state as DecimalType).intValue
	
	var demand = (roomTempAvg - dailyAvgAmbientTemp) * lf - hc

	// Maximum required heat demand is 3kW (@-20C ambient temperature)
	if (demand > 3000) {
		demand = 3000
	}
	demand = demand / 1000 // in kW
	logDebug("gss.daily.power.demand", demand + " kW")
	postUpdate(HeatPowerDemand_DailyAvg, demand)
	
	var Number maxBoilerPower = (ActiveBoilerHeatingElements.state as DecimalType).intValue
	// number of active heating elements of the boiler
	logDebug("gss.maxBoilerPower", maxBoilerPower + " kW");
	
	logDebug("gss.url", "" + GoogleScriptURL.state)
	
	var Number lhRatio = (LO_HI_Ratio.state as DecimalType).intValue
	
	var curlCommand = String::format(
		// windows specific call
		//"cmd.exe /c curl -k \"%1$s?Date=%%date%%&Time=%%time%%" + // 1
		// linux specific call
		"/usr/bin/curl -k \"%1$s?Date=%9$tF&Time=%9$tR" + //1
		"&RoomTemp=%2$.2f" + //2
		"&AmbientTemp=%3$.2f" + //3
		"&HeatLoadFactor=%4$d" + //4
		"&HeatCompensation_W=%5$d" + //5
		"&boilerMaxPower_kW=%6$d" + //6
		"&dailyAvgPowerDemand_kW=%7$.3f" + //7
		"&LO_HI_Ratio=%8$d\"", //8 
		GoogleScriptURL.state, roomTempAvg, dailyAvgAmbientTemp, lf, hc, maxBoilerPower, demand, lhRatio, new Date()
		)
	//executeCommandLine("cmd.exe /c echo \"123\"");
	executeCommandLine(curlCommand, 2000);
end


