Group All
Group gWeather 	(All)
Group gStatus 	(All)
Group gPresense	(All)
Group Heating	(All)

/* active groups */
//Group:Switch:OR(ON, OFF) 		Heating 	"No. of Active Heatings [(%d)]" 	<heating> 			(All)
Group:Number:AVG 				TempSensor	"Avg. Room Temperature [%.1f °C]" 	<temperature>	(gStatus)

Group:Switch:OR(ON, OFF) 		WarmFloorValve	"Warm floor loops [(%d)]"			(All)
Group:Switch:OR(ON, OFF)		ThermoValve		"Клапаны коллектора [%d / 4]"		(gStatus)
Group:Number:SUM				ValveToggleCycle 	"Total valve toggle cycles [(%d)]"	(gStatus)
Group:Switch:OR(ON, OFF)		RelaysGPIO		"Реле управления котлом и гребенкой [%d]"

Group gBoiler		(gStatus)
Group gSetPoints	(gStatus)
Group gPWM			(gStatus)
Group gTrend	(gStatus) // check boiler trends during test period

Group gSolar	(gStatus) // test solar pump & T-diff controller

// initialize values after in a short delay after System startup.
Switch AfterStartup

/* Test Modbus OVEN PLC */
/*
Group Modbus	(All)
Number OvenStatus_MSB		"Register 0. status [(%d)]"			(Modbus)	{modbus="oven:0"}
Number OvenStatus_LSB		"Register 2. Counter [(%d)]"		(Modbus)	{modbus="oven:2"}
Switch OvenSwitch 			"Oven switch"						(Modbus)	{modbus="oven:1"}
*/

Switch SolarPump	"Solar pump [%s]"	(gSolar, RelaysGPIO)	// {gpio="pin:23 activelow:yes"} // Relay #4
String PumpControl	"Pump status [%s]"	(gSolar)	{mqtt="<[cloud-mqtt:brodok/solar/pump:command:REGEX((on|off))]"}

// Boiler trends
Number trBoilerTemp	"Boiler temperature [%d C]" (gTrend) // 20 - 40 - 50 - 70 - 80
Number trValveLiv	"Liv room valve 0: OFF, 5: ON"	(gTrend)	// 0 - OFF, 5 - ON , Living Room valve
Number trValveKit	"Kitchen valve 10: OFF, 15: ON" (gTrend)	// 10 - OFF, 15 - ON, Kitchen valve 
Number trValveKProxy	"Kitchen valve proxy 20: OFF, 25: ON" (gTrend)	// Kitchen valve proxy 

/* Owntracks */
String Location_Sveta_Phone (gPresense) {mqtt="<[cloud-mqtt:owntracks/sveta:state:JS(mqttitude-coordinates.js)]"}

/* Network health status */
Group:Switch:OR(ON, OFF) gNetworkHealth "Network health [%d / 3]" (gStatus)
Switch nhMqtt 		"cloudmqtt.com [%s]"		(gNetworkHealth) { nh="m20.cloudmqtt.com:10350", mqtt=">[cloud-mqtt:brodok/openhab/lwt:state:ON:CONNECTED]" }
String nhMqttLwtStatus	"MQTT status [%s]"		(gNetworkHealth) { mqtt=">[cloud-mqtt:brodok/openhab/lwt:state:ON:CONNECTED]" }
Switch nhCalendar	"calendar.google.com [%s]"	(gNetworkHealth) { nh="googleapis.com:443" }
Switch nhForecastIo "api.forecast.io [%s]"		(gNetworkHealth) { nh="api.forecast.io" }

/* New Heating request state logic */
Group gHeatingReq
Group gHEvent // heating event meta data

//String CalendarHeatingRequest	"Calendar request [%s]"	(gHeatingReq)	{mqtt="<[cloud-mqtt:brodok/heating/req:command:REGEX((HI|HI_B|LO_R|LO_50R|LO_50B|LO_ALL|Off|CAL))]"}
String CalendarHeatingRequest	"Calendar request [%s]"	(gHeatingReq)	{mqtt="<[cloud-mqtt:brodok/heating/event:command:JSONPATH($.type)]"}

String UserHeatingRequest	"User request [%s]"	(gHeatingReq) // sitemap GUI binding selection
Switch CalendarRequestPriority	"Calendar priority"	<calendar> (gHeatingReq) // Does calendar request override user request?
Number UserRequestMaxDuration	"User request max. duration [%d h]" <clock> (gHeatingReq) // 2-3-4-6-8 h
String BoilerCtrlMode	"Boiler control mode [%s]"	(gHeatingReq) // manually | by calendar
DateTime UserRequestExpires	"Manual request mode expires [%1$tH:%1$tM]"	(gHeatingReq) // time when the last heating request command from user will expire
String BoilerHeatingMode	"Heating mode [MAP(ru.map):%s]"	(gHeatingReq) // status text label read-only: Low temperature, High temperature, Off
String GHeatingCalendar	"Heating schedule" (gStatus)

Number BoilerEventPower	"Boiler power [%.2f kW]"	(gBoiler, gHEvent)	//{mqtt="<[cloud-mqtt:brodok/heating/event:state:JSONPATH($.power)]"}
Number HeatingEventPeriod_m	"Event duration [%d min]" (gHeatingReq, gHEvent)	//{mqtt="<[cloud-mqtt:brodok/heating/event:state:JSONPATH($.duration)]"}

String HeatingEventRawData	"Heating event JSON [%s]" (gHeatingReq, gHEvent)	{mqtt="<[cloud-mqtt:brodok/heating/event:state:default]"}
Number HeatingEventCountDown	"Event expires in [%d min]"	(gHeatingReq, gHEvent)
Switch WarmFloorValveHelper
/* Heating */

// Towel heater valve is normally open. Switch position:ON is a default state. By default: OFF
//Switch Heating_Valve_Towel_Warmer	 	"Towel warmer switch" 			<heating>	(Heating, ThermoValve, RelaysGPIO)	{gpio="pin:17"} // Relay #1
//Number HV_Towel_Warmer_Toggle_Counter	"Towel warmer toggles [(%d)]"				(ValveToggleCycle)
Switch Heating_Valve_LivingRoom		"Living room valve"	<heating>		(Heating, ThermoValve, RelaysGPIO, gPWM)	{gpio="pin:17"} // Relay #1
//Number PWM_LivingRoom_Loop			"Living room PWM [%d %%]"	(Heating)		{mqtt="<[cloud-mqtt:brodok/heating/pwm/livingroom:state:default]"}
Switch LivingRoom_PWM_PV		"Living room PWM PV [%s]"	(Heating, gPWM)
Number LivingRoom_PWM_SP		"Living room PWM duty cycle (setpoint) [%d %%]" (Heating, gPWM, gHEvent)	//{mqtt="<[cloud-mqtt:brodok/heating/event:state:JSONPATH($.pwm)]"}
Switch LivingRoom_PWM_enabled	"Living room PWM enabled [%s]"			(Heating, gPWM) // enable only when LO_50R or HI event(s) is up
Number Radiators_PWM_Cycle		"Radiators PWM cycle [%d min]"			(Heating, gPWM) // 20min -- 240 min (4h)

Number Valve_Toggle_Deadband	"Valve toggle deadband [%d min]"		(Heating, gPWM)

// Warm floor valves are normally closed. Switch position=ON -> opens the valve (3 min. delay) and it's heating loop
Switch Heating_Valve_Kitchen 	"Kitchen" 		<heating>	(Heating, /*WarmFloorValve, */ThermoValve, RelaysGPIO)	{gpio="pin:27 activelow:yes"} // Relay #2
Switch Kitchen_Valve_Proxy		"Kitchen valve proxy" <heating> (Heating, WarmFloorValve) // accepts requests
Number HV_Kitchen_Toggle_Counter	"Kitchen valve toggles [(%d)]"				(ValveToggleCycle)
Number Kitchen_PWM_SP		"Kitchen underfloor PWM duty cycle [%d %%]"	(Heating, gPWM, gHEvent)	
Switch Kitchen_PWM_PV		"Kitchen PWM PV [%s]" (Heating, gPWM)	

Switch Heating_Valve_Bath_floor	"Bath & Corridor" 	<heating>	(Heating, WarmFloorValve, ThermoValve, RelaysGPIO)	{gpio="pin:22 activelow:yes"} // Relay #3 
Number HV_Bath_Floor_Toggle_Counter	"Bath floor valve toggles [(%d)]"				(ValveToggleCycle)

/* 
 * Bath & corridor share the same relay output. Excluding binding for corridor.
 *
Switch Heating_Valve_Corridor 	"Corridor" 		<heating>	(Heating, WarmFloorValve, ThermoValve, RelaysGPIO)	{gpio="pin:23 activelow:yes"} // Relay #4
Number HV_Corridor_Toggle_Counter	"Towel warmer toggles [(%d)]"				(ValveToggleCycle)
 */

/* This mode is secondary and controlled by room thermostat. Boiler heating supply temperature should be set to 35-45 C, 
 * to meet warm floor heating requirements. By default: OFF
 */
Switch Heating_Boiler_LO	"LO (50 °C) [%s]" 	<light>	(gBoiler)		{gpio="pin:10"} // via optocoupler to boiler RP switch 

/* This mode is primary and is controlled by openhab server. In this mode only room radiators are expected to operate,
 * and any warm floor heating valves should be closed. The temperature of heating medium is set-up manually in the boiler's service menu.
 * Default state: OFF
 * GPIO -> Optocoupler -> boiler WZ contact (COM-NO)
 */
Switch Heating_Boiler_HI	"HI (70 °C) [%s]"	<light>	(gBoiler)		{gpio="pin:7"}

// used to open/close all warm floor valves when boiler is in LO mode. If controller is failed, the default relay is closed (NC-COM are used)
// Default state: ON
/*
Switch Heating_WF_Valves_LO_OFF		"230V Warm floor valves"		(Heating, WarmFloorValve, RelaysGPIO) 	{gpio="pin:27 activelow:no"}	// Relay #2
*/

/* 3 valid modes: OFF, LO, HI 
 * Deprecated. Use BoilerHeatingMode item. Off / HI / LO_R / LO_ALL
 */
//String Heating_Boiler_Mode		"Boiler mode: [%s]"				(gBoiler)		{mqtt="<[cloud-mqtt:brodok/heating/boiler/mode:command:REGEX((HI|LO|Off))]"}

/* Flow rate of heat medium. Depends on the number of open heating valves */
Number 	Heating_FlowRate		"Total flow rate of heat medium [%.1f l/min]"		(gBoiler)
/* Boiler power depends on boiler mode and flow rate */
Number	Heating_Power_Estimate	"Estimated boiler power [%.1f kW]"					(gBoiler)
/* Boiler's delivery water temperature */
Number 	Heating_Boiler_Delivery_Water_Temp	"Delivery water temp. [%.1f °C]"		<temperature>	(gBoiler, gTrend)
/* Boiler's return water temperature */
Number 	Heating_Boiler_Return_Water_Temp	"Return water temp. [%.1f °C]"			<temperature>	(gBoiler, gTrend)

/* Indoor Temperatures */
Number TempSensor_Corridor	 	"Прихожая [%.1f °C]"	<temperature>	(TempSensor)
Number TempSensor_Kitchen 		"Кухня [%.1f °C]"		<temperature>	(TempSensor)
Number TempSensor_Bedroom 		"Спальня [%.1f °C]"		<temperature>	(TempSensor)

/* Warm floor temperature set points */
Number TWF_Kitchen_SP			"Кухня [%.1f]" 			<temperature> 	(gSetPoints)
Number TWF_Corridor_SP			"Прихожая [%.1f]" 		<temperature> 	(gSetPoints)
Number T_Bedroom_SP				"Спальня [%.1f]"		<temperature>	(gSetPoints)


/* Movement sensor */
Contact Corridor_Presense		"Обнаружено присутствие [%s]"				(gPresense)
DateTime LastPresenseDate		"Последняя дата присутствия [%1$ta %1$tR]"	<calendar>		(gPresense)

Group Weather_Chart													(gWeather)

Number Pi_Temperature 			"pi CPU temperature [%.1f C]" 	<temperature> (Weather_Chart)  {mqtt="<[cloud-mqtt:brodok/heating/pi/cpu_temp:state:default]"}
Number Weather_Temp_Max 		"Todays Maximum [%.1f °C]"		<temperature> (Weather_Chart)
Number Weather_Temp_Min 		"Todays Minimum [%.1f °C]"		<temperature> (Weather_Chart)
Number Weather_Chart_Period		"Chart Period"
DateTime Weather_LastUpdate		"Last Update [%1$ta %1$tR]"	<clock>

/* Heating load calculation variables */
Group gHeatingEQ
Group gHeatingParams (gHeatingEQ)
/* Power demand is calculated daily based on ambient temperature, required inside temp.
 * and heat load factor of the building (which is constant). It also takes into account
 * heat compensation (in Watts) by humans and electric devices like fridge, stove, computer, lights etc.
 */
Number HeatPowerDemand_Current	"Current heat power demand [%.2f kW]"	(gHeatingEQ)
Number HeatPowerDemand_DailyAvg	"Daily heat power demand [%.2f kW]"	(gHeatingEQ)
Number HeatLoadFactor		"Heating load factor [%d W/°C]"	(gHeatingEQ, gHeatingParams)

Number HeatCompensation		"Heat compensation [%d W]"			(gHeatingEQ, gHeatingParams)
// Persistable
Number ActiveBoilerHeatingElements	"Boiler's active heating elements [%d]"		(gBoiler, gHeatingEQ, gHeatingParams)
String GoogleScriptURL "Spreadsheet update url: [%s]"							(gHeatingEQ) {mqtt="<[cloud-mqtt:brodok/heating/google-script-url:state:default]"}
DateTime PowerDemandLastUpdate	"Current demand last update: [%1$tA,  %1$tH:%1$tM]"	(gHeatingEQ)

Number Duration_ALL_40C		"Warm floors & radiators [%.2f h]"	(gHeatingEQ)
Number Duration_R_70C		"Radiators 70C [%.2f h]"		(gHeatingEQ)
Number Duration_R_40C		"Radiators 40C [%.2f h]"	(gHeatingEQ)

Group gDailyMeters	"Daily meters as is" (Heating)
Number LO_R_dailyMeter	"Radiators 40C [%d s]"	(gDailyMeters)
Number HI_dailyMeter	"Radiators 70C [%d s]"	(gDailyMeters)
Number LO_ALL_dailyMeter	"Warm floors & Radiators [%d s]"	(gDailyMeters)
Number PowerConsumptionAsIs	"Потребление фактически [%.2f kWh]" (gDailyMeters)

/* Warm floor comfort hours. User settings */
Group gWarmFloorComfortHours
Number wd_mo_hh	"Working days morning [%.1f h]"		(gWarmFloorComfortHours) // from 2:00 till 12:00, 7.5 -> 7:30 AM
Number wd_ev_hh	"Working days evening [%.1f h]" 	(gWarmFloorComfortHours) // from 14:00 till 24:00
Number we_mo_hh "Weekends morning [%.1f h]"			(gWarmFloorComfortHours)
Number we_ev_hh "Weekends evening [%.1f h]"			(gWarmFloorComfortHours)

Number 	Temperature   	"Температура воздуха [%.1f °C]"		<temperature>	(gWeather, gHeatingEQ, gSolarTrend)	{weather="locationId=home, type=temperature, property=current"}
Number	Humidity      	"Влажность [%d %%]"       							(gWeather)	{weather="locationId=home, type=athmosphere, property=humidity"}
Number	AtmPressure_mbar		"Pressure [%.2f mbar]"		(gWeather)		{weather="locationId=home, type=athmosphere, property=pressure"}
Number	AtmPressure_mmHg	"Атмосферное давление [%d mmHg]" (gWeather)
Number	MonthAverageTemp	"Средне-климатическая t месяца [%.1f C]" <temperature> (gWeather)

Group gMovingAverage (gStatus)
/* Moving average */
/*
Number ma24hTemp	"за последние 24 ч. [%.2f °C]"	<temperature>	(gWeather, gMovingAverage)
Number ma48hTemp	"за последние 48 ч. [%.2f °C]"	<temperature>	(gWeather, gMovingAverage)
String tempAccum24h	"Накоплено за 24 ч. [%s]"	(gStatus)
String tempAccum48h	"Накоплено за 48 ч. [%s]"	(gStatus)
*/
Number ma24hRrdTemp	"RRD 24 ч. [%.2f °C]"	<temperature>	(gWeather, gMovingAverage)
Number ma48hRrdTemp	"RRD 48 ч. [%.2f °C]"	<temperature>	(gWeather, gMovingAverage)
//Number AmbientTempRrd "Rrd temperature [%.2f C]" (gWeather)


/* NTP binding demo item */
DateTime		Date			"Date [%1$tA, %1$td.%1$tm.%1$tY]"	<calendar>	(gStatus)	{ ntp="Europe/Minsk:ru_RU" } 	
// shows the sunrise
DateTime Sunrise_Time  			"Восход [%1$tH:%1$tM]"  			<clock>		(gStatus)	/*{astro="type=SUNRISE_TIME"}  v1.6 binding only:*/ {astro="planet=sun, type=rise, property=start"}


DateTime CivilDawn_Time  		"Заря [%1$tH:%1$tM]" 				<clock>		(gStatus)	{astro="planet=sun, type=civilDawn, property=start"}
DateTime CivilDusk_Time  		"Гражд. сумерки [%1$tH:%1$tM]" 		<clock>		(gStatus)	{astro="planet=sun, type=civilDusk, property=end"}

